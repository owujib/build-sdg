{"version":3,"sources":["../../src/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","db","sequelize","environment","Sequelize","use_env_variable","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","dialectOption","ssl","native","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,QAAQ,GAAGC,cAAKD,QAAL,CAAcE,UAAd,CAAjB;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,GAAuBD,OAAO,CAACD,GAAR,CAAYE,QAAnC,GAA8C,aAA1D;AAEA,MAAMC,MAAM,GAAGC,gBAAWJ,GAAX,CAAf,C,CAEA;;AAEA,MAAMK,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIH,MAAM,CAACI,WAAP,KAAuB,YAA3B,EAAyC;AACvCD,EAAAA,SAAS,GAAG,IAAIE,kBAAJ,CACVP,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACM,gBAAnB,CADU,EAC4BN,MAD5B,CAAZ;AAGAG,EAAAA,SAAS,GAAG,IAAIE,kBAAJ,CACVP,OAAO,CAACD,GAAR,CAAYU,OADF,EAEVT,OAAO,CAACD,GAAR,CAAYW,OAFF,EAGVV,OAAO,CAACD,GAAR,CAAYY,OAHF,EAGW;AACnBC,IAAAA,IAAI,EAAEZ,OAAO,CAACD,GAAR,CAAYc,OADC;AAEnBC,IAAAA,IAAI,EAAEd,OAAO,CAACD,GAAR,CAAYgB,OAFC;AAGnBC,IAAAA,OAAO,EAAE,UAHU;AAInBC,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAE,IADQ;AAEbC,MAAAA,MAAM,EAAE;AAFK,KAJI;AAQnBC,IAAAA,OAAO,EAAE;AARU,GAHX,CAAZ;AAcD,CAlBD,MAkBO;AACLf,EAAAA,SAAS,GAAG,IAAIE,kBAAJ,CACVL,MAAM,CAACmB,QADG,EACOnB,MAAM,CAACoB,QADd,EACwBpB,MAAM,CAACqB,QAD/B,EACyCrB,MADzC,CAAZ;AAGD;;AAEDsB,YACGC,WADH,CACeC,SADf,EAEGC,MAFH,CAEWC,IAAD,IAAWA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IACLD,IAAI,KAAKhC,QADJ,IACkBgC,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAHzD,EAIGC,OAJH,CAIYH,IAAD,IAAU;AACjB,QAAMI,KAAK,GAAG3B,SAAS,CAAC4B,MAAV,CAAiBpC,cAAKqC,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAxB,EAAAA,EAAE,CAAC4B,KAAK,CAACG,IAAP,CAAF,GAAiBH,KAAjB;AACD,CAPH;;AASAI,MAAM,CAACC,IAAP,CAAYjC,EAAZ,EAAgB2B,OAAhB,CAAyBO,SAAD,IAAe;AACrC,MAAIlC,EAAE,CAACkC,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BnC,IAAAA,EAAE,CAACkC,SAAD,CAAF,CAAcC,SAAd,CAAwBnC,EAAxB;AACD;AACF,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACG,SAAH,GAAeA,kBAAf;eAEeH,E","sourcesContent":["\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport Sequelize from 'sequelize';\r\nimport configJson from '../config/config';\r\n\r\nconst basename = path.basename(__filename);\r\nconst env = process.env.NODE_ENV ? process.env.NODE_ENV : 'development';\r\n\r\nconst config = configJson[env];\r\n\r\n// console.log('this is the environment: ', env);\r\n\r\nconst db = {};\r\n\r\nlet sequelize;\r\nif (config.environment === 'production') {\r\n  sequelize = new Sequelize(\r\n    process.env[config.use_env_variable], config\r\n  );\r\n  sequelize = new Sequelize(\r\n    process.env.DB_NAME,\r\n    process.env.DB_USER,\r\n    process.env.DB_PASS, {\r\n      host: process.env.DB_HOST,\r\n      port: process.env.DB_PORT,\r\n      dialect: 'postgres',\r\n      dialectOption: {\r\n        ssl: true,\r\n        native: true\r\n      },\r\n      logging: true\r\n    }\r\n  );\r\n} else {\r\n  sequelize = new Sequelize(\r\n    config.database, config.username, config.password, config\r\n  );\r\n}\r\n\r\nfs\r\n  .readdirSync(__dirname)\r\n  .filter((file) => (file.indexOf('.') !== 0)\r\n           && (file !== basename) && (file.slice(-3) === '.js'))\r\n  .forEach((file) => {\r\n    const model = sequelize.import(path.join(__dirname, file));\r\n    db[model.name] = model;\r\n  });\r\n\r\nObject.keys(db).forEach((modelName) => {\r\n  if (db[modelName].associate) {\r\n    db[modelName].associate(db);\r\n  }\r\n});\r\n\r\ndb.sequelize = sequelize;\r\ndb.Sequelize = Sequelize;\r\n\r\nexport default db;\r\n"],"file":"index.js"}